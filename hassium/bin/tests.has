import * from point;

class MyClass {
    func fib (n: number): number {
        if (n == 0) return 0;
        if (n == 1) return 1;
        return MyClass.fib (n - 2) + MyClass.fib (n - 1);
    }
}

func main () {
    arr = [1, 2, 3];
    obj = {
        arr,
        num: 5,
        "str": "s",
    };

    foreach (i in arr) {
        println (i);
    }

    println (obj.arr [2]);
    obj.num += 2;
    println (obj.num);
    println (10.5);
    println (add (10, 20, obj.num));
    println (void ());
    
    arr.push ('pushed');
    println (arr.peek ());
    println (arr.pop ());
    println (arr.pop ());

    println (typeof (2));
    println (typeof (2) == number);

    a = [1, 2, 4];
    a [0] = 2;
    a [5] = 5;
    foreach (z in a) {
        println (z);
    }
    println (a[1:]);
    println (a[:1]);
    println (a[1:3]);

    p1 = Point (2, 4);
    p2 = Point (10, 12);
    p1.addX (3);
    p2.addY (4);

    p1.print ();
    p2.print ();
    p3 = p1 + p2;
    p3.print();

    try {
      println ("From try");
      try {
        nestedException1();
        println ("This should not print");
      } catch (e) {
        println ("Caught nested: ");
        println (e);
      } 
      raise "some exception";
      println ("should not print");
    } catch (e) {
      println ("Caught: ");
      println (e);
    }

    t = Two (1, 2, 3);
    t.some ();
    t.another ();

    acceptsOne (t);
}

func nestedException1 () {
  nestedException2 ();
  println ("This should not print");
}

func nestedException2 () {
  raise "A nested exception";
  println ("This should not print");
}

println (MyClass.fib (13));

func add (x: any, y: any, z: any): any {
    return x + y + z;
}

func void () {
    
}

class One {
  func new (x, y) {
    println ("Base constructor");
    self.x = x;
    self.y = y;
  }

  func some () {
    println (self.x + self.y);
  }
}

class Two extends One {
  func new (x, y, z) {
    super (x, y);
    self.z = z; 
    self.foo = "thing"; 
  }

  func another () {
    println (self.x + self.y + self.z);
  }
}

func acceptsOne (x: One) {

}

main();